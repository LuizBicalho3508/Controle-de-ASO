import os
import firebase_admin
from firebase_admin import credentials, auth, firestore
from datetime import datetime, timedelta

# Importa a biblioteca para ler arquivos TOML.
# Tenta usar a nativa do Python 3.11+, se n√£o der, usa a que instalamos.
try:
    import tomllib
except ModuleNotFoundError:
    import toml as tomllib


# --- CONFIGURA√á√ïES ---
# O caminho padr√£o para o arquivo de segredos do Streamlit
SECRETS_FILE_PATH = ".streamlit/secrets.toml"
ADMIN_EMAIL = 'admin@suaempresa.com'
ADMIN_PASSWORD = 'SenhaForte123' # TROQUE POR UMA SENHA SEGURA

# --- NOVA L√ìGICA PARA LER O SECRETS.TOML ---
print("--- Lendo arquivo de credenciais secrets.toml ---")
if not os.path.exists(SECRETS_FILE_PATH):
    print(f"‚ùå Erro: Arquivo de segredos n√£o encontrado em '{SECRETS_FILE_PATH}'")
    print("   Certifique-se de que o arquivo .streamlit/secrets.toml existe e est√° preenchido.")
    exit()

try:
    with open(SECRETS_FILE_PATH, "rb") as f:
        secrets = tomllib.load(f)
    
    # Pega a se√ß√£o espec√≠fica das credenciais do Firebase
    firebase_credentials = secrets.get("firebase_credentials")
    if not firebase_credentials:
        raise ValueError("A se√ß√£o [firebase_credentials] n√£o foi encontrada no secrets.toml")

except Exception as e:
    print(f"‚ùå Erro ao ler ou processar o arquivo secrets.toml: {e}")
    exit()


# --- INICIALIZA√á√ÉO DO FIREBASE ---
try:
    # Carrega as credenciais a partir do dicion√°rio lido do TOML
    cred = credentials.Certificate(firebase_credentials)
    firebase_admin.initialize_app(cred)
    print("‚úÖ Conex√£o com o Firebase bem-sucedida.")
except Exception as e:
    print(f"‚ùå Erro ao conectar com o Firebase: {e}")
    print("   Verifique se a se√ß√£o [firebase_credentials] no seu secrets.toml est√° correta.")
    exit()

db = firestore.client()

# --- 1. CRIA√á√ÉO DO USU√ÅRIO ADMIN (l√≥gica inalterada) ---
print("\n--- Iniciando cria√ß√£o do usu√°rio admin ---")
try:
    user = auth.create_user(
        email=ADMIN_EMAIL,
        password=ADMIN_PASSWORD,
        email_verified=True,
        display_name='Administrador'
    )
    auth.set_custom_user_claims(user.uid, {'role': 'admin'})
    print(f"‚úÖ Usu√°rio admin '{ADMIN_EMAIL}' criado com sucesso!")

except auth.EmailAlreadyExistsError:
    print(f"‚ö†Ô∏è  O usu√°rio admin '{ADMIN_EMAIL}' j√° existe. Nenhuma a√ß√£o foi tomada.")
except Exception as e:
    print(f"‚ùå Erro ao criar usu√°rio admin: {e}")


# --- 2. CRIA√á√ÉO DE UM ASO DE EXEMPLO (l√≥gica inalterada) ---
print("\n--- Iniciando cria√ß√£o de ASO de exemplo ---")
try:
    asos_ref = db.collection('asos').where('nome_funcionario', '==', 'Funcion√°rio Exemplo').limit(1).stream()
    if not any(asos_ref):
        data_exame_exemplo = datetime.now() - timedelta(days=200)
        data_vencimento_exemplo = datetime.now() + timedelta(days=55)

        aso_data = {
            "nome_funcionario": "Funcion√°rio Exemplo",
            "funcao": "Desenvolvedor",
            "tipo_exame": "Peri√≥dico",
            "resultado": "Apto",
            "data_exame": data_exame_exemplo,
            "data_vencimento": data_vencimento_exemplo,
            "nome_medico": "Dra. Grey",
            "crm_medico": "98765-BR",
            "url_arquivo_aso": None,
            "lancado_por": "script_seed",
            "data_lancamento": firestore.SERVER_TIMESTAMP
        }
        
        db.collection('asos').add(aso_data)
        print("‚úÖ ASO de exemplo para 'Funcion√°rio Exemplo' criado com sucesso.")
    else:
        print("‚ö†Ô∏è  ASO de exemplo j√° existe. Nenhuma a√ß√£o foi tomada.")

except Exception as e:
    print(f"‚ùå Erro ao criar ASO de exemplo: {e}")

print("\nüöÄ Estrutura inicial do banco de dados configurada!")
